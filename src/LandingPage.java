import java.awt.event.MouseAdapter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author yinuo
 */

public class LandingPage extends javax.swing.JFrame {
    
    protected MyHashTable hashTable;
    protected int bucketCount;

    /**
     * Creates new form LandingPage
     */
    public LandingPage() {
        bucketCount = 5;
        hashTable = new MyHashTable(5);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        employeeType = new javax.swing.ButtonGroup();
        InputErrorMsg = new javax.swing.JDialog();
        InputErrorMsgButton = new javax.swing.JButton();
        InputErrorDialog = new javax.swing.JLabel();
        employeeSex = new javax.swing.ButtonGroup();
        employeeLocation = new javax.swing.ButtonGroup();
        MissingEntries = new javax.swing.JDialog();
        MissingEntriesDialog = new javax.swing.JLabel();
        errorLabel1 = new javax.swing.JLabel();
        EmployeeExistsError = new javax.swing.JDialog();
        EmployeeExistsDialog = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        searchEN = new javax.swing.JTextField();
        searchHeading = new javax.swing.JLabel();
        SearchButton = new javax.swing.JButton();
        addHeading = new javax.swing.JLabel();
        addFN = new java.awt.TextField();
        addLN = new java.awt.TextField();
        addEN = new java.awt.TextField();
        labelEN = new java.awt.Label();
        labelFN = new java.awt.Label();
        labelLN = new java.awt.Label();
        AddEmp = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        addDR = new java.awt.TextField();
        labelSX = new java.awt.Label();
        labelWL = new java.awt.Label();
        radioButtonPT = new javax.swing.JRadioButton();
        radioButtonFT = new javax.swing.JRadioButton();
        labelDR = new java.awt.Label();
        tableScrollPane = new javax.swing.JScrollPane();
        empTable = new javax.swing.JTable();
        displayHeading = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        partTimeVSFullTime = new javax.swing.JTabbedPane();
        fillerTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        partTimeTab = new javax.swing.JPanel();
        labelHW = new java.awt.Label();
        addHW = new java.awt.TextField();
        labelHPW = new java.awt.Label();
        addHPW = new java.awt.TextField();
        labelWPY = new java.awt.Label();
        addWPY = new java.awt.TextField();
        fullTimeTab = new javax.swing.JPanel();
        labelYS = new java.awt.Label();
        addYS = new java.awt.TextField();
        employeeMale = new javax.swing.JRadioButton();
        employeeFemale = new javax.swing.JRadioButton();
        employeeOther = new javax.swing.JRadioButton();
        locationMississauga = new javax.swing.JRadioButton();
        locationOttawa = new javax.swing.JRadioButton();
        locationChicago = new javax.swing.JRadioButton();

        InputErrorMsg.setMinimumSize(new java.awt.Dimension(272, 207));
        InputErrorMsg.setResizable(false);

        InputErrorMsgButton.setText("Got it");
        InputErrorMsgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputErrorMsgButtonActionPerformed(evt);
            }
        });

        InputErrorDialog.setText("Please check your input!");

        javax.swing.GroupLayout InputErrorMsgLayout = new javax.swing.GroupLayout(InputErrorMsg.getContentPane());
        InputErrorMsg.getContentPane().setLayout(InputErrorMsgLayout);
        InputErrorMsgLayout.setHorizontalGroup(
            InputErrorMsgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputErrorMsgLayout.createSequentialGroup()
                .addGroup(InputErrorMsgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InputErrorMsgLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(InputErrorMsgButton))
                    .addGroup(InputErrorMsgLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(InputErrorDialog)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        InputErrorMsgLayout.setVerticalGroup(
            InputErrorMsgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputErrorMsgLayout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(InputErrorDialog)
                .addGap(37, 37, 37)
                .addComponent(InputErrorMsgButton)
                .addGap(60, 60, 60))
        );

        MissingEntries.setMinimumSize(new java.awt.Dimension(300, 200));
        MissingEntries.setResizable(false);

        MissingEntriesDialog.setText("Error! Please make sure all entries are filled out!");

        errorLabel1.setText("(And ensure all entries are of the correct type)");

        javax.swing.GroupLayout MissingEntriesLayout = new javax.swing.GroupLayout(MissingEntries.getContentPane());
        MissingEntries.getContentPane().setLayout(MissingEntriesLayout);
        MissingEntriesLayout.setHorizontalGroup(
            MissingEntriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MissingEntriesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MissingEntriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MissingEntriesDialog)
                    .addComponent(errorLabel1))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        MissingEntriesLayout.setVerticalGroup(
            MissingEntriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MissingEntriesLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(MissingEntriesDialog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel1)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        EmployeeExistsError.setMinimumSize(new java.awt.Dimension(300, 200));
        EmployeeExistsError.setResizable(false);

        EmployeeExistsDialog.setText("Error! Employee already exists!");

        javax.swing.GroupLayout EmployeeExistsErrorLayout = new javax.swing.GroupLayout(EmployeeExistsError.getContentPane());
        EmployeeExistsError.getContentPane().setLayout(EmployeeExistsErrorLayout);
        EmployeeExistsErrorLayout.setHorizontalGroup(
            EmployeeExistsErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeExistsErrorLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(EmployeeExistsDialog)
                .addContainerGap(94, Short.MAX_VALUE))
        );
        EmployeeExistsErrorLayout.setVerticalGroup(
            EmployeeExistsErrorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeExistsErrorLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(EmployeeExistsDialog)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 102, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        title.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Employee Database");

        searchEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchENActionPerformed(evt);
            }
        });

        searchHeading.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        searchHeading.setText("Search Employee By Number");

        SearchButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        addHeading.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        addHeading.setText("Add Employee");

        addEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addENActionPerformed(evt);
            }
        });
        addEN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addENKeyTyped(evt);
            }
        });

        labelEN.setText("Employee Number");

        labelFN.setText("First Name");

        labelLN.setText("Last Name");

        AddEmp.setText("Add");
        AddEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEmpActionPerformed(evt);
            }
        });

        saveButton.setText("Save To Text File");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load From Text File");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        addDR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDRActionPerformed(evt);
            }
        });

        labelSX.setText("Sex");

        labelWL.setText("Work Location");

        employeeType.add(radioButtonPT);
        radioButtonPT.setText("Part-Time");
        radioButtonPT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonPTActionPerformed(evt);
            }
        });

        employeeType.add(radioButtonFT);
        radioButtonFT.setText("Full-Time");
        radioButtonFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonFTActionPerformed(evt);
            }
        });

        labelDR.setText("Deduction Rate");

        empTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Employee Number", "First Name", "Last Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        empTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        empTable.setOpaque(false);
        empTable.getTableHeader().setReorderingAllowed(false);
        tableScrollPane.setViewportView(empTable);
        empTable.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = empTable.rowAtPoint(evt.getPoint());
                if (empTable.getValueAt(row, 0) != null && String.valueOf(empTable.getValueAt(row, 0)) != ""){
                    searchEmpInFrame((int)empTable.getValueAt(row, 0));
                }
            }
        });

        empTable.getTableHeader().addMouseListener(new MouseAdapter() {
            int[] clicked = {0,0,0};
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int col = empTable.columnAtPoint(evt.getPoint());
                if (clicked[col]==0){
                    clicked[col] = 1;
                }
                else if (clicked[col] == 1){
                    clicked[col] = 2;
                }
                else{ // if clicked[col] == 2
                    clicked[col] = 1;
                }
                sortTable(col, clicked[col]);
            };
        });

        displayHeading.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        displayHeading.setText("Employees Displayed");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        partTimeVSFullTime.setEnabled(false);

        fillerTab.setEnabled(false);

        jLabel2.setText("Please select either Part-Time or Full-Time above");

        javax.swing.GroupLayout fillerTabLayout = new javax.swing.GroupLayout(fillerTab);
        fillerTab.setLayout(fillerTabLayout);
        fillerTabLayout.setHorizontalGroup(
            fillerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillerTabLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        fillerTabLayout.setVerticalGroup(
            fillerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fillerTabLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        partTimeVSFullTime.addTab("", fillerTab);

        labelHW.setText("Hourly Wage");

        labelHPW.setText("Hours Per Week");

        labelWPY.setText("Weeks Per Year");

        javax.swing.GroupLayout partTimeTabLayout = new javax.swing.GroupLayout(partTimeTab);
        partTimeTab.setLayout(partTimeTabLayout);
        partTimeTabLayout.setHorizontalGroup(
            partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelHW, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelHPW, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelWPY, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addHW, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addWPY, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHPW, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        partTimeTabLayout.setVerticalGroup(
            partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, partTimeTabLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelHW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelHPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(partTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelWPY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addWPY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        partTimeVSFullTime.addTab("Part-Time", partTimeTab);

        labelYS.setText("Yearly Salary");

        addYS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addYSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fullTimeTabLayout = new javax.swing.GroupLayout(fullTimeTab);
        fullTimeTab.setLayout(fullTimeTabLayout);
        fullTimeTabLayout.setHorizontalGroup(
            fullTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelYS, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(addYS, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fullTimeTabLayout.setVerticalGroup(
            fullTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(fullTimeTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addYS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelYS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        partTimeVSFullTime.addTab("Full-Time", fullTimeTab);

        employeeSex.add(employeeMale);
        employeeMale.setText("Male");
        employeeMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeMaleActionPerformed(evt);
            }
        });

        employeeSex.add(employeeFemale);
        employeeFemale.setText("Female");

        employeeSex.add(employeeOther);
        employeeOther.setText("Other");

        employeeLocation.add(locationMississauga);
        locationMississauga.setText("Mississauga");

        employeeLocation.add(locationOttawa);
        locationOttawa.setText("Ottawa");

        employeeLocation.add(locationChicago);
        locationChicago.setText("Chicago");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchHeading)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(SearchButton)))
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addComponent(partTimeVSFullTime, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(labelLN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelFN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelEN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelSX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(labelWL, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(labelDR, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(51, 51, 51)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(addEN, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(addFN, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(addLN, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(locationMississauga)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(locationOttawa)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(locationChicago))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(employeeMale)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(employeeFemale)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(employeeOther)
                                                        .addGap(48, 48, 48))
                                                    .addComponent(addDR, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(radioButtonPT)
                                        .addGap(67, 67, 67)
                                        .addComponent(radioButtonFT))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(150, 150, 150)
                                        .addComponent(AddEmp))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(105, 105, 105)
                                        .addComponent(addHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(displayHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(searchEN, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1011, 1011, 1011)
                        .addComponent(refreshButton)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(title)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchHeading)
                                    .addComponent(addHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(displayHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchEN, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelFN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addLN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelLN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(employeeMale)
                                            .addComponent(employeeFemale)
                                            .addComponent(employeeOther))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(locationMississauga)
                                            .addComponent(locationOttawa)
                                            .addComponent(locationChicago)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(labelSX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelWL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addDR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelDR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(radioButtonPT)
                                    .addComponent(radioButtonFT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(partTimeVSFullTime, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SearchButton)
                                .addGap(122, 122, 122)
                                .addComponent(loadButton)
                                .addGap(18, 18, 18)
                                .addComponent(saveButton)))
                        .addGap(18, 18, 18)
                        .addComponent(AddEmp)))
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchENActionPerformed
        
    }//GEN-LAST:event_searchENActionPerformed

    private void addENActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
    }
    
    private void employeeMaleActionPerformed(java.awt.event.ActionEvent evt){
        
    }
    
     private void addENKeyTyped(java.awt.event.KeyEvent evt){
        
    }
    
    private void searchEmpInFrame(int eN){
        EmployeeInfo employeeFound = hashTable.searchEmployee(eN);
        if (employeeFound == null){
            NoEmpFound noEmp = new NoEmpFound(this);
            noEmp.setVisible(true);
        }
        else{
            InquireFrame iFrame = new InquireFrame(employeeFound, hashTable, this);
            iFrame.setVisible(true);
        }
    }
    
    public boolean isStringInt(String s){
        try {
            Integer.parseInt(s);
            return true;
        } 
        catch (NumberFormatException ex){
            return false;
        }
    }
    
        public boolean isStringDouble(String s){
        try {
            Double.parseDouble(s);
            return true;
        } 
        catch (NumberFormatException ex){
            return false;
        }
    }
    
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        String searchEntry = searchEN.getText();
        if (isStringInt(searchEntry) == true){
            searchEmpInFrame(Integer.parseInt(searchEN.getText()));
            searchEN.setText("");
        }
        else {
            InputErrorMsg.setVisible(true);
        }
    }//GEN-LAST:event_SearchButtonActionPerformed
    
    private void AddEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEmpActionPerformed
        boolean entryError = false;       
        String enEntry = addEN.getText();
        int eN = 0;
        if (isStringInt(enEntry) == true){
            eN = Integer.parseInt(addEN.getText());
        }
        else {
            entryError = true;
        }
        for (int i=0; i<bucketCount; ++i){
            ArrayList<EmployeeInfo> currentAList = hashTable.buckets[i];
            for (int k=0; k<currentAList.size(); ++k){
                if (isDuplicate(eN, currentAList.get(k))){
                    // display box here
                    return;
                }
            }
        }
        String fN = addFN.getText();
        String lN = addLN.getText();
        
        String edEntry = addDR.getText();
        double dR = 0;
        if (isStringDouble(edEntry) == true){
            dR = Double.parseDouble(addDR.getText());
        }
        else {
            entryError = true;
        }
        
        boolean entriesAreGood = false;
        
        if (enEntry.isEmpty() || fN.isEmpty() || lN.isEmpty() || edEntry.isEmpty()){
            entriesAreGood = false;
        }
        else {
            entriesAreGood = true;
        }
           
        int sX = 0;
        int wL = 0;
        
        if (employeeMale.isSelected()){
            sX = 0;
        }
        else if (employeeFemale.isSelected()){
            sX = 1;
        }
        else {
            sX = 2;
        }
        
        boolean sexSelected = false;
        if (employeeMale.isSelected() || employeeFemale.isSelected() || employeeOther.isSelected()){
            sexSelected = true;
        }
        
        if (locationMississauga.isSelected()){
            wL = 0;
        }
        else if (locationOttawa.isSelected()){
            wL = 1;
        }
        else {
            wL = 2;
        }
        
        boolean locationSelected = false;
        if (locationMississauga.isSelected() || locationOttawa.isSelected() || locationChicago.isSelected()){
            locationSelected = true;
        }
        
        boolean jobStatus = false;
        if (radioButtonPT.isSelected() || radioButtonFT.isSelected()){
            jobStatus = true;
        }
        
        boolean partTimeEntry = false;
        boolean fullTimeEntry = false;
        
        double hW = 0;
        int hPW = 0;
        int wPY = 0;
        double yS = 0;

        if (radioButtonPT.isSelected()){
            String hwEntry = addHW.getText();
            if (isStringDouble(hwEntry) == true){
                hW = Double.parseDouble(addHW.getText());
            }
            else {
                entryError = true;
            }
        
            String hpwEntry = addHPW.getText();
            if (isStringInt(hpwEntry) == true){
                hPW = Integer.parseInt(addHPW.getText());
            }
            else {
                entryError = true;
            }
        
            String wpyEntry = addWPY.getText();
            if (isStringInt(wpyEntry) == true){
                wPY = Integer.parseInt(addWPY.getText());
            }
            else {
                entryError = true;
            }
            
            if (hwEntry.isEmpty() || hpwEntry.isEmpty() || wpyEntry.isEmpty()){
                partTimeEntry = false;
            }
            else {
                partTimeEntry = true;
            }
        }
        else if (radioButtonFT.isSelected()){
            String ysEntry = addYS.getText();
            if (isStringDouble(ysEntry) == true){
                yS = Double.parseDouble(addYS.getText());
                fullTimeEntry = true;
            }
            else if (ysEntry != ""){
                fullTimeEntry = true;
            }
            else {
                entryError = true;
            }
        }

        boolean workEntry = false;
        if (partTimeEntry == true || fullTimeEntry == true){
            workEntry = true;
        }
        
        boolean everythingOK = false;
        if (entriesAreGood == true && sexSelected == true && locationSelected == true && jobStatus == true && workEntry == true){
                everythingOK = true;
        }
        
        
        if (everythingOK == false){
                        MissingEntries.setVisible(true);
                        entryError = false;
        }

        else if (entryError == true){
            InputErrorMsg.setVisible(true);
        }
        
        else if (everythingOK == true){
            if (radioButtonPT.isSelected()){
                hashTable.addEmployee(new PartTimeEmployee(eN, fN, lN, sX, wL, dR, hW, hPW, wPY));
            }
            else {
                hashTable.addEmployee(new FullTimeEmployee(eN, fN, lN, sX, wL, dR, yS));

            }
            
        addEN.setText("");
        addFN.setText("");
        addLN.setText("");
        addDR.setText("");
        addHW.setText("");
        addHPW.setText("");
        addWPY.setText("");
        addYS.setText("");
        employeeSex.clearSelection();
        employeeLocation.clearSelection();
        employeeType.clearSelection();
        partTimeVSFullTime.setSelectedIndex(0);
        partTimeVSFullTime.setEnabled(false);
        }      
    }//GEN-LAST:event_AddEmpActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try{
            BufferedWriter out = new BufferedWriter(new FileWriter("saveFile.txt"));
            for (int i=0; i<bucketCount; ++i){
                for (int k=0; k<hashTable.buckets[i].size(); ++k){
                    EmployeeInfo empToWrite = hashTable.buckets[i].get(k);
                    String saveString = "";
                    saveString += Integer.toString(empToWrite.getEmployeeNum()) + ",";
                    saveString += empToWrite.getFirstName() + ",";
                    saveString += empToWrite.getLastName() + ",";
                    saveString += Integer.toString(empToWrite.getSex()) + ",";
                    saveString += Integer.toString(empToWrite.getWorkLocation()) + ",";
                    saveString += Double.toString(empToWrite.getDeductionRate()) + ",";
                    if (empToWrite instanceof PartTimeEmployee){
                        PartTimeEmployee partEmpToWrite = (PartTimeEmployee)empToWrite;
                        saveString += "P,";
                        saveString += Double.toString(partEmpToWrite.getHourlyWage()) + ",";
                        saveString += Integer.toString(partEmpToWrite.getHoursPerWeek()) + ",";
                        saveString += Integer.toString(partEmpToWrite.getWeeksPerYear());
                    }
                    else{ // instance of FullTimeEmployee
                        saveString += "F,";
                        saveString += Double.toString(((FullTimeEmployee)empToWrite).getYearlySalary());
                    }
                    
                    out.write(saveString);
                    out.newLine();
                }
            }
            out.close();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        try{
            BufferedReader in = new BufferedReader(new FileReader("saveFile.txt"));
            String empInfo;
            HashSet<Integer> empList = new HashSet();
            for (int i=0; i<bucketCount; ++i){
                ArrayList<EmployeeInfo> currentAList = hashTable.buckets[i];
                for (int k=0; k<currentAList.size(); ++k){
                    empList.add(currentAList.get(k).getEmployeeNum());
                }
            }
            while((empInfo = in.readLine()) != null){
                // should i wipe the current hashtable or just add new stuff
                String[] readEmp = empInfo.split(",");
                int curEN = Integer.parseInt(readEmp[0]);
                if (empList.contains(curEN)){
                    continue;
                }
                String curFN = readEmp[1];
                String curLN = readEmp[2];
                int curSX = Integer.parseInt(readEmp[3]);
                int curWL = Integer.parseInt(readEmp[4]);
                double curDR = Double.parseDouble(readEmp[5]);
                if (readEmp[6].equals("P")){
                    Double curHW = Double.parseDouble(readEmp[7]);
                    int curHPW = Integer.parseInt(readEmp[8]);
                    int curWPY = Integer.parseInt(readEmp[9]);
                    hashTable.addEmployee(new PartTimeEmployee(curEN, curFN, curLN, curSX, curWL, curDR, curHW, curHPW, curWPY));
                }
                else{ // if readEmp[6] = "F" (Full Time Employee)
                    Double curYS = Double.parseDouble(readEmp[7]);
                    hashTable.addEmployee(new FullTimeEmployee(curEN, curFN, curLN, curSX, curWL, curDR, curYS));
                }
            }
        }
        catch(IOException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void clearTableContents(){
        for (int i=0; i<empTable.getRowCount(); ++i){
            for (int j=0; j<empTable.getColumnCount(); ++j){
                empTable.setValueAt("", i, j);
            }
        }
    }
    
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        clearTableContents();
        int row = 0;
        for (int i=0; i<bucketCount; ++i){
            ArrayList<EmployeeInfo> currentAList = hashTable.buckets[i];
            for (int k=0; k<currentAList.size(); ++k){
                empTable.setValueAt(currentAList.get(k).getEmployeeNum(),row,0);
                empTable.setValueAt(currentAList.get(k).getFirstName(), row, 1);
                empTable.setValueAt(currentAList.get(k).getLastName(), row, 2);
                row++;
            }
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void InputErrorMsgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputErrorMsgButtonActionPerformed
            InputErrorMsg.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_InputErrorMsgButtonActionPerformed

    private void addYSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addYSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addYSActionPerformed
    
    private void radioButtonPTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonPTActionPerformed
        // TODO add your handling code here:
        partTimeVSFullTime.setEnabled(true);
        partTimeVSFullTime.setEnabledAt(0, false);
        partTimeVSFullTime.setEnabledAt(1, true);
        partTimeVSFullTime.setEnabledAt(2, false);
        partTimeVSFullTime.setSelectedIndex(1);
        addYS.setText("");
    }//GEN-LAST:event_radioButtonPTActionPerformed

    private void radioButtonFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonFTActionPerformed
        // TODO add your handling code here:
        partTimeVSFullTime.setEnabled(true);
        partTimeVSFullTime.setEnabledAt(0, false);
        partTimeVSFullTime.setEnabledAt(2, true);
        partTimeVSFullTime.setEnabledAt(1, false);
        partTimeVSFullTime.setSelectedIndex(2);
        addHW.setText("");
        addHPW.setText("");
        addWPY.setText("");
    }//GEN-LAST:event_radioButtonFTActionPerformed

    private void addDRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addDRActionPerformed
    
    Comparator<String[]> compEN = (String[] a, String[] b) -> {
        int Ai = Integer.parseInt(a[0]), Bi = Integer.parseInt(b[0]);
        if (Ai == Bi){
            if (a[1].compareTo(b[1])==0){
                return a[2].compareTo(b[2]);
            }
            return a[1].compareTo(b[1]);
        }
        else{
            return Ai-Bi;
        }
    };
    
    Comparator<String[]> compFN = (String[] a, String[] b) -> {
        int Ai = Integer.parseInt(a[0]), Bi = Integer.parseInt(b[0]);
        if (a[1].equals(b[1])){
            if (a[2].equals(b[2])){
                return Ai-Bi;
            }
            return a[2].compareTo(b[2]);
        }
        else{
            return a[1].compareTo(b[1]);
        }
    };
    
    Comparator<String[]> compLN = (String[] a, String[] b) -> {
        int Ai = Integer.parseInt(a[0]), Bi = Integer.parseInt(b[0]);
        if (a[2].equals(b[2])){
            if (a[1].equals(b[1])){
                return Ai-Bi;
            }
            return a[1].compareTo(b[1]);
        }
        else{
            return a[2].compareTo(b[2]);
        }
    };

    private void sortTable(int col, int clicked){
        int row = 0;
        ArrayList<String[]> empsList = new ArrayList();
        while(!String.valueOf(empTable.getValueAt(row,0)).equals("")){
            String[] empToAdd = new String[3];
            empToAdd[0]=String.valueOf(empTable.getValueAt(row,0));
            empToAdd[1]=String.valueOf(empTable.getValueAt(row,1));
            empToAdd[2]=String.valueOf(empTable.getValueAt(row,2));
            empsList.add(empToAdd);
            row++;
        }
        switch (col) {
            case 0:
                Collections.sort(empsList, compEN);
                break;
            case 1:
                Collections.sort(empsList, compFN);
                break;
            default:
                Collections.sort(empsList, compLN);
                break;
        }
        if (clicked==2){
            Collections.reverse(empsList);
        }
        for (int i=0; i<row; ++i){
            empTable.setValueAt(empsList.get(i)[0],i,0);
            empTable.setValueAt(empsList.get(i)[1],i,1);
            empTable.setValueAt(empsList.get(i)[2],i,2);
        }
    }
    
    protected boolean isDuplicate(int currentEN, EmployeeInfo existing){
        if (currentEN == existing.getEmployeeNum()){
            return true;
        }
        return false;
    }
  
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new LandingPage().setVisible(true);
//            }
//        });
//    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddEmp;
    private javax.swing.JLabel EmployeeExistsDialog;
    private javax.swing.JDialog EmployeeExistsError;
    private javax.swing.JLabel InputErrorDialog;
    private javax.swing.JDialog InputErrorMsg;
    private javax.swing.JButton InputErrorMsgButton;
    private javax.swing.JDialog MissingEntries;
    private javax.swing.JLabel MissingEntriesDialog;
    private javax.swing.JButton SearchButton;
    private java.awt.TextField addDR;
    private java.awt.TextField addEN;
    private java.awt.TextField addFN;
    private java.awt.TextField addHPW;
    private java.awt.TextField addHW;
    private javax.swing.JLabel addHeading;
    private java.awt.TextField addLN;
    private java.awt.TextField addWPY;
    private java.awt.TextField addYS;
    private javax.swing.JLabel displayHeading;
    private javax.swing.JTable empTable;
    private javax.swing.JRadioButton employeeFemale;
    private javax.swing.ButtonGroup employeeLocation;
    private javax.swing.JRadioButton employeeMale;
    private javax.swing.JRadioButton employeeOther;
    private javax.swing.ButtonGroup employeeSex;
    private javax.swing.ButtonGroup employeeType;
    private javax.swing.JLabel errorLabel1;
    private javax.swing.JPanel fillerTab;
    private javax.swing.JPanel fullTimeTab;
    private javax.swing.JLabel jLabel2;
    private java.awt.Label labelDR;
    private java.awt.Label labelEN;
    private java.awt.Label labelFN;
    private java.awt.Label labelHPW;
    private java.awt.Label labelHW;
    private java.awt.Label labelLN;
    private java.awt.Label labelSX;
    private java.awt.Label labelWL;
    private java.awt.Label labelWPY;
    private java.awt.Label labelYS;
    private javax.swing.JButton loadButton;
    private javax.swing.JRadioButton locationChicago;
    private javax.swing.JRadioButton locationMississauga;
    private javax.swing.JRadioButton locationOttawa;
    private javax.swing.JPanel partTimeTab;
    private javax.swing.JTabbedPane partTimeVSFullTime;
    private javax.swing.JRadioButton radioButtonFT;
    private javax.swing.JRadioButton radioButtonPT;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchEN;
    private javax.swing.JLabel searchHeading;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
